diff --git a/src/cmd/compile/internal/arm64/ssa.go b/src/cmd/compile/internal/arm64/ssa.go
index e5dae83d87..289a529bcb 100644
--- a/src/cmd/compile/internal/arm64/ssa.go
+++ b/src/cmd/compile/internal/arm64/ssa.go
@@ -793,7 +793,7 @@ func ssaGenValue(s *ssagen.State, v *ssa.Value) {
 		p3.To.Type = obj.TYPE_MEM
 		p3.To.Reg = r0
 
-   case ssa.OpARM64LoweredSimdAnd8x16:
+	case ssa.OpARM64LoweredSimdAnd8x16:
 		// VLD1 (R1), [V0.D2]
 		// VLD1 (R2), [V1.D2]
 		// VAND V1.B16 V0.B16 V0.B16
@@ -818,7 +818,83 @@ func ssaGenValue(s *ssagen.State, v *ssa.Value) {
 
 		vand := arm64.AVAND
 		p2 := s.Prog(vand)
-    p2.From.Type = obj.TYPE_REG
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = arm64.REG_ARNG + (arm64.REG_V1 & 31) + ((arm64.ARNG_16B & 15) << 5)
+		p2.Reg = arm64.REG_ARNG + (arm64.REG_V0 & 31) + ((arm64.ARNG_16B & 15) << 5)
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = arm64.REG_ARNG + (arm64.REG_V0 & 31) + ((arm64.ARNG_16B & 15) << 5)
+
+		vst1 := arm64.AVST1
+		p3 := s.Prog(vst1)
+		p3.From.Type = obj.TYPE_REGLIST
+		p3.From.Offset = /*0&31 |*/ arm64.ARNG_2D<<12 | 1<<30 | 3<<10 | 1<<60
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpARM64LoweredSimdOr8x16:
+		// VLD1 (R1), [V0.D2]
+		// VLD1 (R2), [V1.D2]
+		// VORR V1.B16 V0.B16 V0.B16
+		// VST1 [V0.D2], (R0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vld1 := arm64.AVLD1
+		p := s.Prog(vld1)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REGLIST
+		p.To.Offset = /*0&31 |*/ arm64.ARNG_2D<<12 | 1<<30 | 3<<10 | 1<<60
+
+		p1 := s.Prog(vld1)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REGLIST
+		p1.To.Offset = 1&31 | arm64.ARNG_2D<<12 | 1<<30 | 3<<10 | 1<<60
+
+		vorr := arm64.AVORR
+		p2 := s.Prog(vorr)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = arm64.REG_ARNG + (arm64.REG_V1 & 31) + ((arm64.ARNG_16B & 15) << 5)
+		p2.Reg = arm64.REG_ARNG + (arm64.REG_V0 & 31) + ((arm64.ARNG_16B & 15) << 5)
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = arm64.REG_ARNG + (arm64.REG_V0 & 31) + ((arm64.ARNG_16B & 15) << 5)
+
+		vst1 := arm64.AVST1
+		p3 := s.Prog(vst1)
+		p3.From.Type = obj.TYPE_REGLIST
+		p3.From.Offset = /*0&31 |*/ arm64.ARNG_2D<<12 | 1<<30 | 3<<10 | 1<<60
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpARM64LoweredSimdXor8x16:
+		// VLD1 (R1), [V0.D2]
+		// VLD1 (R2), [V1.D2]
+		// VEOR V1.B16 V0.B16 V0.B16
+		// VST1 [V0.D2], (R0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vld1 := arm64.AVLD1
+		p := s.Prog(vld1)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REGLIST
+		p.To.Offset = /*0&31 |*/ arm64.ARNG_2D<<12 | 1<<30 | 3<<10 | 1<<60
+
+		p1 := s.Prog(vld1)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REGLIST
+		p1.To.Offset = 1&31 | arm64.ARNG_2D<<12 | 1<<30 | 3<<10 | 1<<60
+
+		veor := arm64.AVEOR
+		p2 := s.Prog(veor)
+		p2.From.Type = obj.TYPE_REG
 		p2.From.Reg = arm64.REG_ARNG + (arm64.REG_V1 & 31) + ((arm64.ARNG_16B & 15) << 5)
 		p2.Reg = arm64.REG_ARNG + (arm64.REG_V0 & 31) + ((arm64.ARNG_16B & 15) << 5)
 		p2.To.Type = obj.TYPE_REG
diff --git a/src/cmd/compile/internal/ssa/_gen/ARM64.rules b/src/cmd/compile/internal/ssa/_gen/ARM64.rules
index 75471c70af..e2100bec6f 100644
--- a/src/cmd/compile/internal/ssa/_gen/ARM64.rules
+++ b/src/cmd/compile/internal/ssa/_gen/ARM64.rules
@@ -570,6 +570,10 @@
 (SimdSaturatingSub8x16 ...) => (LoweredSimdSaturatingSub8x16 ...)
 (SimdAndU8x16 ...) => (LoweredSimdAnd8x16 ...)
 (SimdAnd8x16 ...) => (LoweredSimdAnd8x16 ...)
+(SimdOrU8x16 ...) => (LoweredSimdOr8x16 ...)
+(SimdOr8x16 ...) => (LoweredSimdOr8x16 ...)
+(SimdXorU8x16 ...) => (LoweredSimdXor8x16 ...)
+(SimdXor8x16 ...) => (LoweredSimdXor8x16 ...)
 
 // atomic intrinsics
 // Note: these ops do not accept offset.
diff --git a/src/cmd/compile/internal/ssa/_gen/ARM64Ops.go b/src/cmd/compile/internal/ssa/_gen/ARM64Ops.go
index ce86c97942..452dd59abf 100644
--- a/src/cmd/compile/internal/ssa/_gen/ARM64Ops.go
+++ b/src/cmd/compile/internal/ssa/_gen/ARM64Ops.go
@@ -669,9 +669,17 @@ func init() {
 		{name: "LoweredSimdSaturatingSub8x16", argLength: 4, reg: gpstore2, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
 
 		// SIMD and i8x16.
-		// *arg0 = arg1 - arg2. arg3=mem. returns memory.
+		// *arg0 = arg1 & arg2. arg3=mem. returns memory.
 		{name: "LoweredSimdAnd8x16", argLength: 4, reg: gpstore2, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
 
+		// SIMD or i8x16.
+		// *arg0 = arg1 | arg2. arg3=mem. returns memory.
+		{name: "LoweredSimdOr8x16", argLength: 4, reg: gpstore2, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
+    // SIMD or i8x16.
+		// *arg0 = arg1 ^ arg2. arg3=mem. returns memory.
+		{name: "LoweredSimdXor8x16", argLength: 4, reg: gpstore2, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
 		// atomic exchange.
 		// store arg1 to arg0. arg2=mem. returns <old content of *arg0, memory>. auxint must be zero.
 		// LDAXR	(Rarg0), Rout
diff --git a/src/cmd/compile/internal/ssa/_gen/genericOps.go b/src/cmd/compile/internal/ssa/_gen/genericOps.go
index 4fbef2ed4c..7e80c5fb9b 100644
--- a/src/cmd/compile/internal/ssa/_gen/genericOps.go
+++ b/src/cmd/compile/internal/ssa/_gen/genericOps.go
@@ -595,8 +595,12 @@ var genericOps = []opData{
 	{name: "SimdSub8x16", argLength: 4, typ: "Mem", hasSideEffects: true},             // *arg0 = arg1 - arg2.  arg3=memory.  Returns memory.
 	{name: "SimdStaturatingSubU8x16", argLength: 4, typ: "Mem", hasSideEffects: true}, // *arg0 = arg1 - arg2.  arg3=memory.  Returns memory.
 	{name: "SimdStaturatingSub8x16", argLength: 4, typ: "Mem", hasSideEffects: true},  // *arg0 = arg1 - arg2.  arg3=memory.  Returns memory.
-  {name: "SimdAndU8x16", argLength: 4, typ: "Mem", hasSideEffects: true},            // *arg0 = arg1 & arg2.  arg3=memory.  Returns memory.
+	{name: "SimdAndU8x16", argLength: 4, typ: "Mem", hasSideEffects: true},            // *arg0 = arg1 & arg2.  arg3=memory.  Returns memory.
 	{name: "SimdAnd8x16", argLength: 4, typ: "Mem", hasSideEffects: true},             // *arg0 = arg1 & arg2.  arg3=memory.  Returns memory.
+	{name: "SimdOrU8x16", argLength: 4, typ: "Mem", hasSideEffects: true},             // *arg0 = arg1 | arg2.  arg3=memory.  Returns memory.
+	{name: "SimdOr8x16", argLength: 4, typ: "Mem", hasSideEffects: true},              // *arg0 = arg1 | arg2.  arg3=memory.  Returns memory.
+	{name: "SimdXorU8x16", argLength: 4, typ: "Mem", hasSideEffects: true},            // *arg0 = arg1 ^ arg2.  arg3=memory.  Returns memory.
+	{name: "SimdXor8x16", argLength: 4, typ: "Mem", hasSideEffects: true},             // *arg0 = arg1 ^ arg2.  arg3=memory.  Returns memory.
 
 	// Atomic operations used for semantically inlining sync/atomic and
 	// runtime/internal/atomic. Atomic loads return a new memory so that
diff --git a/src/cmd/compile/internal/ssa/opGen.go b/src/cmd/compile/internal/ssa/opGen.go
index 1e13797ca4..1439b145aa 100644
--- a/src/cmd/compile/internal/ssa/opGen.go
+++ b/src/cmd/compile/internal/ssa/opGen.go
@@ -1711,6 +1711,8 @@ const (
 	OpARM64LoweredSimdSaturatingSub8x16
 	OpARM64LoweredSimdSaturatingSubU8x16
   OpARM64LoweredSimdAnd8x16
+  OpARM64LoweredSimdOr8x16
+  OpARM64LoweredSimdXor8x16
 	OpARM64LoweredAtomicExchange64
 	OpARM64LoweredAtomicExchange32
 	OpARM64LoweredAtomicExchange64Variant
@@ -3206,6 +3208,10 @@ const (
 	OpSimdSaturatingSub8x16
   OpSimdAndU8x16
 	OpSimdAnd8x16
+  OpSimdOrU8x16
+	OpSimdOr8x16
+  OpSimdXorU8x16
+	OpSimdXor8x16
 	OpAtomicLoad8
 	OpAtomicLoad32
 	OpAtomicLoad64
@@ -22879,6 +22885,32 @@ var opcodeTable = [...]opInfo{
 			},
 		},
 	},
+  {
+		name:           "LoweredSimdOr8x16",
+		argLen:         4,
+		faultOnNilArg0: true,
+		hasSideEffects: true,
+		reg: regInfo{
+			inputs: []inputInfo{
+				{1, 805044223},           // R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15 R16 R17 R19 R20 R21 R22 R23 R24 R25 R26 g R30
+				{2, 805044223},           // R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15 R16 R17 R19 R20 R21 R22 R23 R24 R25 R26 g R30
+				{0, 9223372038733561855}, // R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15 R16 R17 R19 R20 R21 R22 R23 R24 R25 R26 g R30 SP SB
+			},
+		},
+	},
+  {
+		name:           "LoweredSimdXor8x16",
+		argLen:         4,
+		faultOnNilArg0: true,
+		hasSideEffects: true,
+		reg: regInfo{
+			inputs: []inputInfo{
+				{1, 805044223},           // R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15 R16 R17 R19 R20 R21 R22 R23 R24 R25 R26 g R30
+				{2, 805044223},           // R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15 R16 R17 R19 R20 R21 R22 R23 R24 R25 R26 g R30
+				{0, 9223372038733561855}, // R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15 R16 R17 R19 R20 R21 R22 R23 R24 R25 R26 g R30 SP SB
+			},
+		},
+	},
 	{
 		name:            "LoweredAtomicExchange64",
 		argLen:          3,
@@ -40437,6 +40469,30 @@ var opcodeTable = [...]opInfo{
 		hasSideEffects: true,
 		generic:        true,
 	},
+  {
+		name:           "SimdOrU8x16",
+		argLen:         4,
+		hasSideEffects: true,
+		generic:        true,
+	},
+	{
+		name:           "SimdOr8x16",
+		argLen:         4,
+		hasSideEffects: true,
+		generic:        true,
+	},
+  {
+		name:           "SimdXorU8x16",
+		argLen:         4,
+		hasSideEffects: true,
+		generic:        true,
+	},
+	{
+		name:           "SimdXor8x16",
+		argLen:         4,
+		hasSideEffects: true,
+		generic:        true,
+	},
 	{
 		name:    "AtomicLoad8",
 		argLen:  2,
diff --git a/src/cmd/compile/internal/ssa/rewriteARM64.go b/src/cmd/compile/internal/ssa/rewriteARM64.go
index 9f9d62d7c0..2767c74c8f 100644
--- a/src/cmd/compile/internal/ssa/rewriteARM64.go
+++ b/src/cmd/compile/internal/ssa/rewriteARM64.go
@@ -1079,6 +1079,18 @@ func rewriteValueARM64(v *Value) bool {
 	case OpSimdAndU8x16:
 		v.Op = OpARM64LoweredSimdAnd8x16
 		return true
+  case OpSimdOr8x16:
+		v.Op = OpARM64LoweredSimdOr8x16
+		return true
+	case OpSimdOrU8x16:
+		v.Op = OpARM64LoweredSimdOr8x16
+		return true
+  case OpSimdXor8x16:
+		v.Op = OpARM64LoweredSimdXor8x16
+		return true
+	case OpSimdXorU8x16:
+		v.Op = OpARM64LoweredSimdXor8x16
+		return true
 	case OpSlicemask:
 		return rewriteValueARM64_OpSlicemask(v)
 	case OpSqrt:
diff --git a/src/cmd/compile/internal/ssagen/ssa.go b/src/cmd/compile/internal/ssagen/ssa.go
index c7a29cb12d..d3924bd937 100644
--- a/src/cmd/compile/internal/ssagen/ssa.go
+++ b/src/cmd/compile/internal/ssagen/ssa.go
@@ -4330,6 +4330,18 @@ func InitTables() {
 			return nil
 		},
 		sys.ARM64)
+	addF("runtime/internal/simd", "Or8x16",
+		func(s *state, n *ir.CallExpr, args []*ssa.Value) *ssa.Value {
+			s.vars[memVar] = s.newValue4(ssa.OpSimdOr8x16, types.TypeMem, args[0], args[1], args[2], s.mem())
+			return nil
+		},
+		sys.ARM64)
+	addF("runtime/internal/simd", "Xor8x16",
+		func(s *state, n *ir.CallExpr, args []*ssa.Value) *ssa.Value {
+			s.vars[memVar] = s.newValue4(ssa.OpSimdXor8x16, types.TypeMem, args[0], args[1], args[2], s.mem())
+			return nil
+		},
+		sys.ARM64)
 
 	/******** runtime/internal/atomic ********/
 	addF("runtime/internal/atomic", "Load",
@@ -5069,6 +5081,10 @@ func InitTables() {
 	alias("simd", "saturatingSub8x16", "runtime/internal/simd", "SaturatingSub8x16", sys.ArchARM64)
 	alias("simd", "andU8x16", "runtime/internal/simd", "And8x16", sys.ArchARM64)
 	alias("simd", "and8x16", "runtime/internal/simd", "And8x16", sys.ArchARM64)
+	alias("simd", "orU8x16", "runtime/internal/simd", "Or8x16", sys.ArchARM64)
+	alias("simd", "or8x16", "runtime/internal/simd", "Or8x16", sys.ArchARM64)
+	alias("simd", "xorU8x16", "runtime/internal/simd", "Xor8x16", sys.ArchARM64)
+	alias("simd", "xor8x16", "runtime/internal/simd", "Xor8x16", sys.ArchARM64)
 
 	/******** sync/atomic ********/
 
