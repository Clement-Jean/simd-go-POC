SaturatedAdd8x16 Patch (arm64)
====================

The goal of this patch is to generate VQADD instructions when simd.SaturaturedAdd8x16
or simd.SaturaturedAddU8x16 are called.

For example:

a := &[16]uint8{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}
b := &[16]uint8{17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32}
c := simd.SaturaturedAddU8x16(a, b)

Will generate the following Go ASM (for SaturaturedAddU8x16):

VLD1 (R1), [V0.D2]
VLD1 (R2), [V1.D2]
VQADD V1.B16, V0.B16, V0.B16
VST1 [V0.D2], (R0)

diff --git a/src/cmd/compile/internal/arm64/ssa.go b/src/cmd/compile/internal/arm64/ssa.go
index 203542459c..8dbe1b50d3 100644
--- a/src/cmd/compile/internal/arm64/ssa.go
+++ b/src/cmd/compile/internal/arm64/ssa.go
@@ -649,6 +649,76 @@ func ssaGenValue(s *ssagen.State, v *ssa.Value) {
 		p3.To.Type = obj.TYPE_MEM
 		p3.To.Reg = r0
 
+	case ssa.OpARM64LoweredSimdSaturatingAddU8x16:
+		// VLD1 (R1), [V0.D2]
+		// VLD1 (R2), [V1.D2]
+		// WORD $0x6e210c00
+		// VST1 [V0.D2], (R0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vld1 := arm64.AVLD1
+		p := s.Prog(vld1)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REGLIST
+		p.To.Offset = /*0&31 |*/ arm64.ARNG_2D<<12 | 1<<30 | 3<<10 | 1<<60
+
+		p1 := s.Prog(vld1)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REGLIST
+		p1.To.Offset = 1&31 | arm64.ARNG_2D<<12 | 1<<30 | 3<<10 | 1<<60
+
+		word := arm64.AWORD
+		p2 := s.Prog(word)
+		p2.To.Type = obj.TYPE_CONST
+		p2.To.Offset = 0x6e210c00 // VQADD V1.B16, V0.B16, V0.B16
+
+		vst1 := arm64.AVST1
+		p3 := s.Prog(vst1)
+		p3.From.Type = obj.TYPE_REGLIST
+		p3.From.Offset = /*0&31 |*/ arm64.ARNG_2D<<12 | 1<<30 | 3<<10 | 1<<60
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpARM64LoweredSimdSaturatingAdd8x16:
+		// VLD1 (R1), [V0.D2]
+		// VLD1 (R2), [V1.D2]
+		// WORD $0x4e210c00
+		// VST1 [V0.D2], (R0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vld1 := arm64.AVLD1
+		p := s.Prog(vld1)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REGLIST
+		p.To.Offset = /*0&31 |*/ arm64.ARNG_2D<<12 | 1<<30 | 3<<10 | 1<<60
+
+		p1 := s.Prog(vld1)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REGLIST
+		p1.To.Offset = 1&31 | arm64.ARNG_2D<<12 | 1<<30 | 3<<10 | 1<<60
+
+		word := arm64.AWORD
+		p2 := s.Prog(word)
+		p2.To.Type = obj.TYPE_CONST
+		p2.To.Offset = 0x4e210c00 // VQADD V1.B16, V0.B16, V0.B16
+
+		vst1 := arm64.AVST1
+		p3 := s.Prog(vst1)
+		p3.From.Type = obj.TYPE_REGLIST
+		p3.From.Offset = /*0&31 |*/ arm64.ARNG_2D<<12 | 1<<30 | 3<<10 | 1<<60
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
 	case ssa.OpARM64LoweredAtomicExchange64,
 		ssa.OpARM64LoweredAtomicExchange32:
 		// LDAXR	(Rarg0), Rout
diff --git a/src/cmd/compile/internal/ssa/_gen/ARM64.rules b/src/cmd/compile/internal/ssa/_gen/ARM64.rules
index fd2799aea3..bd49984b2d 100644
--- a/src/cmd/compile/internal/ssa/_gen/ARM64.rules
+++ b/src/cmd/compile/internal/ssa/_gen/ARM64.rules
@@ -559,6 +559,8 @@
 // simd intrinsics
 (SimdAddU8x16 ...) => (LoweredSimdAdd8x16 ...)
 (SimdAdd8x16 ...) => (LoweredSimdAdd8x16 ...)
+(SimdSaturatingAddU8x16 ...) => (LoweredSimdSaturatingAddU8x16 ...)
+(SimdSaturatingAdd8x16 ...) => (LoweredSimdSaturatingAdd8x16 ...)
 (SimdSubU8x16 ...) => (LoweredSimdSub8x16 ...)
 (SimdSub8x16 ...) => (LoweredSimdSub8x16 ...)
 
diff --git a/src/cmd/compile/internal/ssa/_gen/ARM64Ops.go b/src/cmd/compile/internal/ssa/_gen/ARM64Ops.go
index d85dcbb939..4154711b4d 100644
--- a/src/cmd/compile/internal/ssa/_gen/ARM64Ops.go
+++ b/src/cmd/compile/internal/ssa/_gen/ARM64Ops.go
@@ -643,6 +643,14 @@ func init() {
 		// *arg0 = arg1 + arg2. arg3=mem. returns memory.
 		{name: "LoweredSimdAdd8x16", argLength: 4, reg: gpstore2, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
 
+		// SIMD saturating add u8x16.
+		// *arg0 = arg1 + arg2. arg3=mem. returns memory.
+		{name: "LoweredSimdSaturatingAddU8x16", argLength: 4, reg: gpstore2, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
+		// SIMD saturating add i8x16.
+		// *arg0 = arg1 + arg2. arg3=mem. returns memory.
+		{name: "LoweredSimdSaturatingAdd8x16", argLength: 4, reg: gpstore2, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
 		// SIMD wrapping sub u8x16.
 		// *arg0 = arg1 - arg2. arg3=mem. returns memory.
 		{name: "LoweredSimdSub8x16", argLength: 4, reg: gpstore2, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
diff --git a/src/cmd/compile/internal/ssa/_gen/genericOps.go b/src/cmd/compile/internal/ssa/_gen/genericOps.go
index d70d83fb14..e30b5b2b73 100644
--- a/src/cmd/compile/internal/ssa/_gen/genericOps.go
+++ b/src/cmd/compile/internal/ssa/_gen/genericOps.go
@@ -581,10 +581,12 @@ var genericOps = []opData{
 	{name: "MakeResult", argLength: -1},               // arg0 .. are components of a "Result" (like the result from a Call). The last arg should be memory (like the result from a call).
 
 	// SIMD
-	{name: "SimdAddU8x16", argLength: 4, typ: "Mem", hasSideEffects: true}, // *arg0 = arg1 + arg2.  arg3=memory.  Returns memory.
-	{name: "SimdAdd8x16", argLength: 4, typ: "Mem", hasSideEffects: true},  // *arg0 = arg1 + arg2.  arg3=memory.  Returns memory.
-	{name: "SimdSubU8x16", argLength: 4, typ: "Mem", hasSideEffects: true}, // *arg0 = arg1 - arg2.  arg3=memory.  Returns memory.
-	{name: "SimdSub8x16", argLength: 4, typ: "Mem", hasSideEffects: true},  // *arg0 = arg1 - arg2.  arg3=memory.  Returns memory.
+	{name: "SimdAddU8x16", argLength: 4, typ: "Mem", hasSideEffects: true},            // *arg0 = arg1 + arg2.  arg3=memory.  Returns memory.
+	{name: "SimdAdd8x16", argLength: 4, typ: "Mem", hasSideEffects: true},             // *arg0 = arg1 + arg2.  arg3=memory.  Returns memory.
+	{name: "SimdStaturatingAddU8x16", argLength: 4, typ: "Mem", hasSideEffects: true}, // *arg0 = arg1 + arg2.  arg3=memory.  Returns memory.
+	{name: "SimdStaturatingAdd8x16", argLength: 4, typ: "Mem", hasSideEffects: true},  // *arg0 = arg1 + arg2.  arg3=memory.  Returns memory.
+	{name: "SimdSubU8x16", argLength: 4, typ: "Mem", hasSideEffects: true},            // *arg0 = arg1 - arg2.  arg3=memory.  Returns memory.
+	{name: "SimdSub8x16", argLength: 4, typ: "Mem", hasSideEffects: true},             // *arg0 = arg1 - arg2.  arg3=memory.  Returns memory.
 
 	// Atomic operations used for semantically inlining sync/atomic and
 	// runtime/internal/atomic. Atomic loads return a new memory so that
diff --git a/src/cmd/compile/internal/ssa/opGen.go b/src/cmd/compile/internal/ssa/opGen.go
index f4e12e3832..775e333fd6 100644
--- a/src/cmd/compile/internal/ssa/opGen.go
+++ b/src/cmd/compile/internal/ssa/opGen.go
@@ -1688,6 +1688,8 @@ const (
 	OpARM64STLR
 	OpARM64STLRW
 	OpARM64LoweredSimdAdd8x16
+	OpARM64LoweredSimdSaturatingAdd8x16
+	OpARM64LoweredSimdSaturatingAddU8x16
 	OpARM64LoweredSimdSub8x16
 	OpARM64LoweredAtomicExchange64
 	OpARM64LoweredAtomicExchange32
@@ -3154,6 +3156,8 @@ const (
 	OpMakeResult
 	OpSimdAddU8x16
 	OpSimdAdd8x16
+	OpSimdSaturatingAddU8x16
+	OpSimdSaturatingAdd8x16
 	OpSimdSubU8x16
 	OpSimdSub8x16
 	OpAtomicLoad8
@@ -22505,6 +22509,32 @@ var opcodeTable = [...]opInfo{
 			},
 		},
 	},
+	{
+		name:           "LoweredSimdStaturatingAdd8x16",
+		argLen:         4,
+		faultOnNilArg0: true,
+		hasSideEffects: true,
+		reg: regInfo{
+			inputs: []inputInfo{
+				{1, 805044223},           // R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15 R16 R17 R19 R20 R21 R22 R23 R24 R25 R26 g R30
+				{2, 805044223},           // R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15 R16 R17 R19 R20 R21 R22 R23 R24 R25 R26 g R30
+				{0, 9223372038733561855}, // R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15 R16 R17 R19 R20 R21 R22 R23 R24 R25 R26 g R30 SP SB
+			},
+		},
+	},
+	{
+		name:           "LoweredSimdStaturatingAddU8x16",
+		argLen:         4,
+		faultOnNilArg0: true,
+		hasSideEffects: true,
+		reg: regInfo{
+			inputs: []inputInfo{
+				{1, 805044223},           // R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15 R16 R17 R19 R20 R21 R22 R23 R24 R25 R26 g R30
+				{2, 805044223},           // R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15 R16 R17 R19 R20 R21 R22 R23 R24 R25 R26 g R30
+				{0, 9223372038733561855}, // R0 R1 R2 R3 R4 R5 R6 R7 R8 R9 R10 R11 R12 R13 R14 R15 R16 R17 R19 R20 R21 R22 R23 R24 R25 R26 g R30 SP SB
+			},
+		},
+	},
 	{
 		name:           "LoweredSimdSub8x16",
 		argLen:         4,
@@ -39763,6 +39793,18 @@ var opcodeTable = [...]opInfo{
 		hasSideEffects: true,
 		generic:        true,
 	},
+	{
+		name:           "SimdSaturatingAddU8x16",
+		argLen:         4,
+		hasSideEffects: true,
+		generic:        true,
+	},
+	{
+		name:           "SimdSaturatingAdd8x16",
+		argLen:         4,
+		hasSideEffects: true,
+		generic:        true,
+	},
 	{
 		name:           "SimdSubU8x16",
 		argLen:         4,
diff --git a/src/cmd/compile/internal/ssa/rewriteARM64.go b/src/cmd/compile/internal/ssa/rewriteARM64.go
index 2e01c92ccb..27f597f909 100644
--- a/src/cmd/compile/internal/ssa/rewriteARM64.go
+++ b/src/cmd/compile/internal/ssa/rewriteARM64.go
@@ -1043,6 +1043,12 @@ func rewriteValueARM64(v *Value) bool {
 	case OpSimdAddU8x16:
 		v.Op = OpARM64LoweredSimdAdd8x16
 		return true
+	case OpSimdSaturatingAdd8x16:
+		v.Op = OpARM64LoweredSimdSaturatingAdd8x16
+		return true
+	case OpSimdSaturatingAddU8x16:
+		v.Op = OpARM64LoweredSimdSaturatingAddU8x16
+		return true
 	case OpSimdSub8x16:
 		v.Op = OpARM64LoweredSimdSub8x16
 		return true
diff --git a/src/cmd/compile/internal/ssagen/ssa.go b/src/cmd/compile/internal/ssagen/ssa.go
index 4db36b9c7f..c1e97196d7 100644
--- a/src/cmd/compile/internal/ssagen/ssa.go
+++ b/src/cmd/compile/internal/ssagen/ssa.go
@@ -4151,6 +4151,18 @@ func InitTables() {
 			return nil
 		},
 		sys.ARM64)
+	addF("runtime/internal/simd", "SaturatingAdd8x16",
+		func(s *state, n *ir.CallExpr, args []*ssa.Value) *ssa.Value {
+			s.vars[memVar] = s.newValue4(ssa.OpSimdSaturatingAdd8x16, types.TypeMem, args[0], args[1], args[2], s.mem())
+			return nil
+		},
+		sys.ARM64)
+	addF("runtime/internal/simd", "SaturatingAddU8x16",
+		func(s *state, n *ir.CallExpr, args []*ssa.Value) *ssa.Value {
+			s.vars[memVar] = s.newValue4(ssa.OpSimdSaturatingAddU8x16, types.TypeMem, args[0], args[1], args[2], s.mem())
+			return nil
+		},
+		sys.ARM64)
 	addF("runtime/internal/simd", "Sub8x16",
 		func(s *state, n *ir.CallExpr, args []*ssa.Value) *ssa.Value {
 			s.vars[memVar] = s.newValue4(ssa.OpSimdSub8x16, types.TypeMem, args[0], args[1], args[2], s.mem())
@@ -4887,6 +4899,8 @@ func InitTables() {
 	/******** simd ********/
 	alias("simd", "addU8x16", "runtime/internal/simd", "Add8x16", sys.ArchARM64)
 	alias("simd", "add8x16", "runtime/internal/simd", "Add8x16", sys.ArchARM64)
+	alias("simd", "saturatingAddU8x16", "runtime/internal/simd", "SaturatingAddU8x16", sys.ArchARM64)
+	alias("simd", "saturatingAdd8x16", "runtime/internal/simd", "SaturatingAdd8x16", sys.ArchARM64)
 	alias("simd", "subU8x16", "runtime/internal/simd", "Sub8x16", sys.ArchARM64)
 	alias("simd", "sub8x16", "runtime/internal/simd", "Sub8x16", sys.ArchARM64)
 
