diff --git a/src/cmd/compile/internal/amd64/ssa.go b/src/cmd/compile/internal/amd64/ssa.go
index ab762c24f6..ff1d6b3e3d 100644
--- a/src/cmd/compile/internal/amd64/ssa.go
+++ b/src/cmd/compile/internal/amd64/ssa.go
@@ -1250,6 +1250,723 @@ func ssaGenValue(s *ssagen.State, v *ssa.Value) {
 		if base.Debug.Nil != 0 && v.Pos.Line() > 1 { // v.Pos.Line()==1 in generated wrappers
 			base.WarnfAt(v.Pos, "generated nil check")
 		}
+
+	case ssa.OpAMD64LoweredSimdAdd8x16:
+		// VMOVDQA (arg1), X0
+		// VMOVDQA (arg2), X1
+		// VPADDB X1, X0, X0
+		// VMOVDQA X0, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		p1 := s.Prog(vmovdqa)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X1
+
+		vpaddb := x86.AVPADDB
+		p2 := s.Prog(vpaddb)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = x86.REG_X1
+		p2.RestArgs = []obj.AddrPos{
+			{Addr: obj.Addr{Type: obj.TYPE_REG, Reg: x86.REG_X0}},
+		}
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = x86.REG_X0
+
+		p3 := s.Prog(vmovdqa)
+		p3.From.Type = obj.TYPE_REG
+		p3.From.Reg = x86.REG_X0
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdSub8x16:
+		// VMOVDQA (arg1), X0
+		// VMOVDQA (arg2), X1
+		// VPSUBB X1, X0, X0
+		// VMOVDQA X0, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		p1 := s.Prog(vmovdqa)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X1
+
+		vpsubb := x86.AVPSUBB
+		p2 := s.Prog(vpsubb)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = x86.REG_X1
+		p2.RestArgs = []obj.AddrPos{
+			{Addr: obj.Addr{Type: obj.TYPE_REG, Reg: x86.REG_X0}},
+		}
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = x86.REG_X0
+
+		p3 := s.Prog(vmovdqa)
+		p3.From.Type = obj.TYPE_REG
+		p3.From.Reg = x86.REG_X0
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdSaturatingAdd8x16:
+		// VMOVDQA (arg1), X0
+		// VMOVDQA (arg2), X1
+		// VPADDSB X1, X0, X0
+		// VMOVDQA X0, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		p1 := s.Prog(vmovdqa)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X1
+
+		vpaddsb := x86.AVPADDSB
+		p2 := s.Prog(vpaddsb)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = x86.REG_X1
+		p2.RestArgs = []obj.AddrPos{
+			{Addr: obj.Addr{Type: obj.TYPE_REG, Reg: x86.REG_X0}},
+		}
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = x86.REG_X0
+
+		p3 := s.Prog(vmovdqa)
+		p3.From.Type = obj.TYPE_REG
+		p3.From.Reg = x86.REG_X0
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdSaturatingAddU8x16:
+		// VMOVDQA (arg1), X0
+		// VMOVDQA (arg2), X1
+		// VPADDUSB X1, X0, X0
+		// VMOVDQA X0, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		p1 := s.Prog(vmovdqa)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X1
+
+		vpaddusb := x86.AVPADDUSB
+		p2 := s.Prog(vpaddusb)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = x86.REG_X1
+		p2.RestArgs = []obj.AddrPos{
+			{Addr: obj.Addr{Type: obj.TYPE_REG, Reg: x86.REG_X0}},
+		}
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = x86.REG_X0
+
+		p3 := s.Prog(vmovdqa)
+		p3.From.Type = obj.TYPE_REG
+		p3.From.Reg = x86.REG_X0
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdSaturatingSub8x16:
+		// VMOVDQA (arg1), X0
+		// VMOVDQA (arg2), X1
+		// VPSUBSB X1, X0, X0
+		// VMOVDQA X0, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		p1 := s.Prog(vmovdqa)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X1
+
+		vpsubsb := x86.AVPSUBSB
+		p2 := s.Prog(vpsubsb)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = x86.REG_X1
+		p2.RestArgs = []obj.AddrPos{
+			{Addr: obj.Addr{Type: obj.TYPE_REG, Reg: x86.REG_X0}},
+		}
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = x86.REG_X0
+
+		p3 := s.Prog(vmovdqa)
+		p3.From.Type = obj.TYPE_REG
+		p3.From.Reg = x86.REG_X0
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdSaturatingSubU8x16:
+		// VMOVDQA (arg1), X0
+		// VMOVDQA (arg2), X1
+		// VPSUBUSB X1, X0, X0
+		// VMOVDQA X0, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		p1 := s.Prog(vmovdqa)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X1
+
+		vpsubusb := x86.AVPSUBUSB
+		p2 := s.Prog(vpsubusb)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = x86.REG_X1
+		p2.RestArgs = []obj.AddrPos{
+			{Addr: obj.Addr{Type: obj.TYPE_REG, Reg: x86.REG_X0}},
+		}
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = x86.REG_X0
+
+		p3 := s.Prog(vmovdqa)
+		p3.From.Type = obj.TYPE_REG
+		p3.From.Reg = x86.REG_X0
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdAnd8x16:
+		// VMOVDQA (arg1), X0
+		// VMOVDQA (arg2), X1
+		// VPAND X1, X0, X0
+		// VMOVDQA X0, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		p1 := s.Prog(vmovdqa)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X1
+
+		vpand := x86.AVPAND
+		p2 := s.Prog(vpand)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = x86.REG_X1
+		p2.RestArgs = []obj.AddrPos{
+			{Addr: obj.Addr{Type: obj.TYPE_REG, Reg: x86.REG_X0}},
+		}
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = x86.REG_X0
+
+		p3 := s.Prog(vmovdqa)
+		p3.From.Type = obj.TYPE_REG
+		p3.From.Reg = x86.REG_X0
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdOr8x16:
+		// VMOVDQA (arg1), X0
+		// VMOVDQA (arg2), X1
+		// VPOR X1, X0, X0
+		// VMOVDQA X0, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		p1 := s.Prog(vmovdqa)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X1
+
+		vpor := x86.AVPOR
+		p2 := s.Prog(vpor)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = x86.REG_X1
+		p2.RestArgs = []obj.AddrPos{
+			{Addr: obj.Addr{Type: obj.TYPE_REG, Reg: x86.REG_X0}},
+		}
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = x86.REG_X0
+
+		p3 := s.Prog(vmovdqa)
+		p3.From.Type = obj.TYPE_REG
+		p3.From.Reg = x86.REG_X0
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdXor8x16:
+		// VMOVDQA (arg1), X0
+		// VMOVDQA (arg2), X1
+		// VPXOR X1, X0, X0
+		// VMOVDQA X0, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		p1 := s.Prog(vmovdqa)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X1
+
+		vpxor := x86.AVPXOR
+		p2 := s.Prog(vpxor)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = x86.REG_X1
+		p2.RestArgs = []obj.AddrPos{
+			{Addr: obj.Addr{Type: obj.TYPE_REG, Reg: x86.REG_X0}},
+		}
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = x86.REG_X0
+
+		p3 := s.Prog(vmovdqa)
+		p3.From.Type = obj.TYPE_REG
+		p3.From.Reg = x86.REG_X0
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdMin8x16:
+		// VMOVDQA (arg1), X0
+		// VMOVDQA (arg2), X1
+		// VPMINSB X1, X0, X0
+		// VMOVDQA X0, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		p1 := s.Prog(vmovdqa)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X1
+
+		vpminsb := x86.AVPMINSB
+		p2 := s.Prog(vpminsb)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = x86.REG_X1
+		p2.RestArgs = []obj.AddrPos{
+			{Addr: obj.Addr{Type: obj.TYPE_REG, Reg: x86.REG_X0}},
+		}
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = x86.REG_X0
+
+		p3 := s.Prog(vmovdqa)
+		p3.From.Type = obj.TYPE_REG
+		p3.From.Reg = x86.REG_X0
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdMinU8x16:
+		// VMOVDQA (arg1), X0
+		// VMOVDQA (arg2), X1
+		// VPMINUB X1, X0, X0
+		// VMOVDQA X0, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		p1 := s.Prog(vmovdqa)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X1
+
+		vpminub := x86.AVPMINUB
+		p2 := s.Prog(vpminub)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = x86.REG_X1
+		p2.RestArgs = []obj.AddrPos{
+			{Addr: obj.Addr{Type: obj.TYPE_REG, Reg: x86.REG_X0}},
+		}
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = x86.REG_X0
+
+		p3 := s.Prog(vmovdqa)
+		p3.From.Type = obj.TYPE_REG
+		p3.From.Reg = x86.REG_X0
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdMax8x16:
+		// VMOVDQA (arg1), X0
+		// VMOVDQA (arg2), X1
+		// VPMAXSB X1, X0, X0
+		// VMOVDQA X0, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		p1 := s.Prog(vmovdqa)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X1
+
+		vpmaxsb := x86.AVPMAXSB
+		p2 := s.Prog(vpmaxsb)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = x86.REG_X1
+		p2.RestArgs = []obj.AddrPos{
+			{Addr: obj.Addr{Type: obj.TYPE_REG, Reg: x86.REG_X0}},
+		}
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = x86.REG_X0
+
+		p3 := s.Prog(vmovdqa)
+		p3.From.Type = obj.TYPE_REG
+		p3.From.Reg = x86.REG_X0
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdMaxU8x16:
+		// VMOVDQA (arg1), X0
+		// VMOVDQA (arg2), X1
+		// VPMAXUB X1, X0, X0
+		// VMOVDQA X0, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		p1 := s.Prog(vmovdqa)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X1
+
+		vpmaxub := x86.AVPMAXUB
+		p2 := s.Prog(vpmaxub)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = x86.REG_X1
+		p2.RestArgs = []obj.AddrPos{
+			{Addr: obj.Addr{Type: obj.TYPE_REG, Reg: x86.REG_X0}},
+		}
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = x86.REG_X0
+
+		p3 := s.Prog(vmovdqa)
+		p3.From.Type = obj.TYPE_REG
+		p3.From.Reg = x86.REG_X0
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdExtractU8x16:
+		// VMOVDQA (arg1), X0
+		// VMOVDQA (arg2), X1
+		// PALIGNR (arg3), X0, X1
+		// VMOVDQA X1, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+		n := v.AuxInt
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		p1 := s.Prog(vmovdqa)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X1
+
+		palignr := x86.APALIGNR
+		p2 := s.Prog(palignr)
+		p2.From.Type = obj.TYPE_CONST
+		p2.From.Offset = n
+		p2.RestArgs = []obj.AddrPos{{
+			Addr: obj.Addr{
+				Type: obj.TYPE_REG,
+				Reg:  x86.REG_X0,
+			},
+		}}
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = x86.REG_X1
+
+		p3 := s.Prog(vmovdqa)
+		p3.From.Type = obj.TYPE_REG
+		p3.From.Reg = x86.REG_X1
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdMovMaskByteU8x16:
+		// VMOVDQA (arg0), X0
+		// PMOVMSKB X0, ret+8(FP)
+
+		r0 := v.Args[0].Reg()
+		out := v.Reg0()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r0
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		movmskb := x86.APMOVMSKB
+		p1 := s.Prog(movmskb)
+		p1.From.Type = obj.TYPE_REG
+		p1.From.Reg = x86.REG_X0
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = out
+
+	case ssa.OpAMD64LoweredSimdAnd16x8:
+		// VMOVDQA (arg1), X0
+		// VMOVDQA (arg2), X1
+		// PAND X1, X0
+		// VMOVDQA X0, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		p1 := s.Prog(vmovdqa)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X1
+
+		pand := x86.APAND
+		p2 := s.Prog(pand)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = x86.REG_X1
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = x86.REG_X0
+
+		p3 := s.Prog(vmovdqa)
+		p3.From.Type = obj.TYPE_REG
+		p3.From.Reg = x86.REG_X0
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdShiftRight16x8:
+		// VMOVDQA (arg1), X0
+		// PSHRW (arg2), X0
+		// VMOVDQA X0, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		n := v.Args[2].AuxInt
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		psrlw := x86.APSRLW
+		p1 := s.Prog(psrlw)
+		p1.From.Type = obj.TYPE_CONST
+		p1.From.Offset = n
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X0
+
+		p2 := s.Prog(vmovdqa)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = x86.REG_X0
+		p2.To.Type = obj.TYPE_MEM
+		p2.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdLookupU8x16:
+		// VMOVDQA (arg1), X0
+		// VMOVDQA (arg2), X1
+		// PSHUFB X1, X0
+		// VMOVDQA X0, (arg0)
+
+		r0 := v.Args[0].Reg()
+		r1 := v.Args[1].Reg()
+		r2 := v.Args[2].Reg()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r1
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		p1 := s.Prog(vmovdqa)
+		p1.From.Type = obj.TYPE_MEM
+		p1.From.Reg = r2
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X1
+
+		pshufb := x86.APSHUFB
+		p2 := s.Prog(pshufb)
+		p2.From.Type = obj.TYPE_REG
+		p2.From.Reg = x86.REG_X1
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = x86.REG_X0
+
+		p3 := s.Prog(vmovdqa)
+		p3.From.Type = obj.TYPE_REG
+		p3.From.Reg = x86.REG_X0
+		p3.To.Type = obj.TYPE_MEM
+		p3.To.Reg = r0
+
+	case ssa.OpAMD64LoweredSimdAllZerosU8x16:
+		// VMOVDQA (arg1), X0
+		// PTEST X0, X0
+		// JNE false
+		// MOVB $1, ret+8(FP)
+		// false:
+		// RET
+
+		r0 := v.Args[0].Reg()
+		out := v.Reg0()
+
+		vmovdqa := x86.AVMOVDQA
+		p := s.Prog(vmovdqa)
+		p.From.Type = obj.TYPE_MEM
+		p.From.Reg = r0
+		p.To.Type = obj.TYPE_REG
+		p.To.Reg = x86.REG_X0
+
+		ptest := x86.APTEST
+		p1 := s.Prog(ptest)
+		p1.From.Type = obj.TYPE_REG
+		p1.From.Reg = x86.REG_X0
+		p1.To.Type = obj.TYPE_REG
+		p1.To.Reg = x86.REG_X0
+
+		movb := x86.AMOVB
+		p2 := s.Prog(movb)
+		p2.From.Type = obj.TYPE_CONST
+		p2.From.Offset = 0
+		p2.To.Type = obj.TYPE_REG
+		p2.To.Reg = out
+
+		jne := x86.AJNE
+		j := s.Prog(jne)
+		j.To.Type = obj.TYPE_BRANCH
+
+		p3 := s.Prog(movb)
+		p3.From.Type = obj.TYPE_CONST
+		p3.From.Offset = 1
+		p3.To.Type = obj.TYPE_REG
+		p3.To.Reg = out
+
+		j.To.SetTarget(s.Pc())
+
 	case ssa.OpAMD64MOVBatomicload, ssa.OpAMD64MOVLatomicload, ssa.OpAMD64MOVQatomicload:
 		p := s.Prog(v.Op.Asm())
 		p.From.Type = obj.TYPE_MEM
diff --git a/src/cmd/compile/internal/ssa/_gen/AMD64.rules b/src/cmd/compile/internal/ssa/_gen/AMD64.rules
index 2a4c59ebfc..039e051655 100644
--- a/src/cmd/compile/internal/ssa/_gen/AMD64.rules
+++ b/src/cmd/compile/internal/ssa/_gen/AMD64.rules
@@ -549,6 +549,23 @@
 
 (JumpTable idx) => (JUMPTABLE {makeJumpTableSym(b)} idx (LEAQ <typ.Uintptr> {makeJumpTableSym(b)} (SB)))
 
+// simd intrinsics
+(SimdAdd(8x16|U8x16) ...) => (LoweredSimdAdd8x16 ...)
+(SimdSaturatingAdd(8x16|U8x16) ...) => (LoweredSimdSaturatingAdd(8x16|U8x16) ...)
+(SimdSub(8x16|U8x16) ...) => (LoweredSimdSub8x16 ...)
+(SimdSaturatingSub(8x16|U8x16) ...) => (LoweredSimdSaturatingSub(8x16|U8x16) ...)
+(SimdAnd(8x16|U8x16) ...) => (LoweredSimdAnd8x16 ...)
+(SimdAnd(16x8|U16x8) ...) => (LoweredSimdAnd16x8 ...)
+(SimdOr(8x16|U8x16) ...) => (LoweredSimdOr8x16 ...)
+(SimdXor(8x16|U8x16) ...) => (LoweredSimdXor8x16 ...)
+(SimdMax(8x16|U8x16) ...) => (LoweredSimdMax(8x16|U8x16) ...)
+(SimdMin(8x16|U8x16) ...) => (LoweredSimdMin(8x16|U8x16) ...)
+(SimdExtractU8x16 ...) => (LoweredSimdExtractU8x16 ...)
+(SimdMovMaskByteU8x16 ...) => (LoweredSimdMovMaskByteU8x16 ...)
+(SimdShiftRight16x8 ...) => (LoweredSimdShiftRight16x8 ...)
+(SimdLookupU8x16 ...) => (LoweredSimdLookupU8x16 ...)
+(SimdAllZerosU8x16 ...) => (LoweredSimdAllZerosU8x16 ...)
+
 // Atomic loads.  Other than preserving their ordering with respect to other loads, nothing special here.
 (AtomicLoad8 ptr mem) => (MOVBatomicload ptr mem)
 (AtomicLoad32 ptr mem) => (MOVLatomicload ptr mem)
diff --git a/src/cmd/compile/internal/ssa/_gen/AMD64Ops.go b/src/cmd/compile/internal/ssa/_gen/AMD64Ops.go
index 606171947b..42b55a9fae 100644
--- a/src/cmd/compile/internal/ssa/_gen/AMD64Ops.go
+++ b/src/cmd/compile/internal/ssa/_gen/AMD64Ops.go
@@ -981,6 +981,69 @@ func init() {
 		{name: "LoweredPanicBoundsB", argLength: 3, aux: "Int64", reg: regInfo{inputs: []regMask{cx, dx}}, typ: "Mem", call: true}, // arg0=idx, arg1=len, arg2=mem, returns memory. AuxInt contains report code (see PanicBounds in generic.go).
 		{name: "LoweredPanicBoundsC", argLength: 3, aux: "Int64", reg: regInfo{inputs: []regMask{ax, cx}}, typ: "Mem", call: true}, // arg0=idx, arg1=len, arg2=mem, returns memory. AuxInt contains report code (see PanicBounds in generic.go).
 
+		// SIMD wrapping add u8x16.
+		// *arg0 = arg1 + arg2. arg3=mem. returns memory.
+		{name: "LoweredSimdAdd8x16", argLength: 4, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp}}, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
+		// SIMD saturating add u8x16.
+		// *arg0 = arg1 + arg2. arg3=mem. returns memory.
+		{name: "LoweredSimdSaturatingAddU8x16", argLength: 4, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp}}, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
+		// SIMD saturating add i8x16.
+		// *arg0 = arg1 + arg2. arg3=mem. returns memory.
+		{name: "LoweredSimdSaturatingAdd8x16", argLength: 4, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp}}, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
+		// SIMD wrapping sub u8x16.
+		// *arg0 = arg1 - arg2. arg3=mem. returns memory.
+		{name: "LoweredSimdSub8x16", argLength: 4, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp}}, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
+		// SIMD saturating sub u8x16.
+		// *arg0 = arg1 - arg2. arg3=mem. returns memory.
+		{name: "LoweredSimdSaturatingSubU8x16", argLength: 4, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp}}, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
+		// SIMD saturating sub i8x16.
+		// *arg0 = arg1 - arg2. arg3=mem. returns memory.
+		{name: "LoweredSimdSaturatingSub8x16", argLength: 4, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp}}, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
+		// SIMD and i8x16.
+		// *arg0 = arg1 & arg2. arg3=mem. returns memory.
+		{name: "LoweredSimdAnd8x16", argLength: 4, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp}}, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
+		// SIMD or i8x16.
+		// *arg0 = arg1 | arg2. arg3=mem. returns memory.
+		{name: "LoweredSimdOr8x16", argLength: 4, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp}}, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
+		// SIMD xor i8x16.
+		// *arg0 = arg1 ^ arg2. arg3=mem. returns memory.
+		{name: "LoweredSimdXor8x16", argLength: 4, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp}}, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
+		// SIMD max i8x16.
+		// *arg0 = max(arg1, arg2). arg3=mem. returns memory.
+		{name: "LoweredSimdMax8x16", argLength: 4, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp}}, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
+		// SIMD max u8x16.
+		// *arg0 = max(arg1, arg2). arg3=mem. returns memory.
+		{name: "LoweredSimdMaxU8x16", argLength: 4, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp}}, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
+		// SIMD min i8x16.
+		// *arg0 = min(arg1, arg2). arg3=mem. returns memory.
+		{name: "LoweredSimdMin8x16", argLength: 4, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp}}, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+		// SIMD min u8x16.
+		// *arg0 = min(arg1, arg2). arg3=mem. returns memory.
+		{name: "LoweredSimdMinU8x16", argLength: 4, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp}}, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
+		{name: "LoweredSimdExtractU8x16", argLength: 5, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp, gp}}, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
+		{name: "LoweredSimdMovMaskByteU8x16", argLength: 2, reg: regInfo{inputs: []regMask{gpspsbg}, outputs: []regMask{gp}}, typ: "(Uint16,Mem)"},
+
+		{name: "LoweredSimdAnd16x8", argLength: 4, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp}}, typ: "Mem", faultOnNilArg0: true},
+
+		{name: "LoweredSimdShiftRight16x8", argLength: 4, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp}}, typ: "Mem", faultOnNilArg0: true},
+
+		{name: "LoweredSimdLookupU8x16", argLength: 4, reg: regInfo{inputs: []regMask{gpspsbg, gp, gp}}, typ: "Mem", faultOnNilArg0: true, hasSideEffects: true},
+
+		{name: "LoweredSimdAllZerosU8x16", argLength: 2, reg: regInfo{inputs: []regMask{gpspsbg}, outputs: []regMask{gp}}, typ: "(Bool,Mem)", faultOnNilArg0: true},
+
 		// Constant flag values. For any comparison, there are 5 possible
 		// outcomes: the three from the signed total order (<,==,>) and the
 		// three from the unsigned total order. The == cases overlap.
diff --git a/src/cmd/compile/internal/ssa/rewriteAMD64.go b/src/cmd/compile/internal/ssa/rewriteAMD64.go
index ba71189703..e1091d151c 100644
--- a/src/cmd/compile/internal/ssa/rewriteAMD64.go
+++ b/src/cmd/compile/internal/ssa/rewriteAMD64.go
@@ -1092,6 +1092,81 @@ func rewriteValueAMD64(v *Value) bool {
 	case OpSignExt8to64:
 		v.Op = OpAMD64MOVBQSX
 		return true
+	case OpSimdAdd8x16:
+		v.Op = OpAMD64LoweredSimdAdd8x16
+		return true
+	case OpSimdAddU8x16:
+		v.Op = OpAMD64LoweredSimdAdd8x16
+		return true
+	case OpSimdAllZerosU8x16:
+		v.Op = OpAMD64LoweredSimdAllZerosU8x16
+		return true
+	case OpSimdAnd16x8:
+		v.Op = OpAMD64LoweredSimdAnd16x8
+		return true
+	case OpSimdAnd8x16:
+		v.Op = OpAMD64LoweredSimdAnd8x16
+		return true
+	case OpSimdAndU16x8:
+		v.Op = OpAMD64LoweredSimdAnd16x8
+		return true
+	case OpSimdAndU8x16:
+		v.Op = OpAMD64LoweredSimdAnd8x16
+		return true
+	case OpSimdExtractU8x16:
+		v.Op = OpAMD64LoweredSimdExtractU8x16
+		return true
+	case OpSimdLookupU8x16:
+		v.Op = OpAMD64LoweredSimdLookupU8x16
+		return true
+	case OpSimdMax8x16:
+		v.Op = OpAMD64LoweredSimdMax8x16
+		return true
+	case OpSimdMaxU8x16:
+		v.Op = OpAMD64LoweredSimdMaxU8x16
+		return true
+	case OpSimdMin8x16:
+		v.Op = OpAMD64LoweredSimdMin8x16
+		return true
+	case OpSimdMinU8x16:
+		v.Op = OpAMD64LoweredSimdMinU8x16
+		return true
+	case OpSimdMovMaskByteU8x16:
+		v.Op = OpAMD64LoweredSimdMovMaskByteU8x16
+		return true
+	case OpSimdOr8x16:
+		v.Op = OpAMD64LoweredSimdOr8x16
+		return true
+	case OpSimdOrU8x16:
+		v.Op = OpAMD64LoweredSimdOr8x16
+		return true
+	case OpSimdSaturatingAdd8x16:
+		v.Op = OpAMD64LoweredSimdSaturatingAdd8x16
+		return true
+	case OpSimdSaturatingAddU8x16:
+		v.Op = OpAMD64LoweredSimdSaturatingAddU8x16
+		return true
+	case OpSimdSaturatingSub8x16:
+		v.Op = OpAMD64LoweredSimdSaturatingSub8x16
+		return true
+	case OpSimdSaturatingSubU8x16:
+		v.Op = OpAMD64LoweredSimdSaturatingSubU8x16
+		return true
+	case OpSimdShiftRight16x8:
+		v.Op = OpAMD64LoweredSimdShiftRight16x8
+		return true
+	case OpSimdSub8x16:
+		v.Op = OpAMD64LoweredSimdSub8x16
+		return true
+	case OpSimdSubU8x16:
+		v.Op = OpAMD64LoweredSimdSub8x16
+		return true
+	case OpSimdXor8x16:
+		v.Op = OpAMD64LoweredSimdXor8x16
+		return true
+	case OpSimdXorU8x16:
+		v.Op = OpAMD64LoweredSimdXor8x16
+		return true
 	case OpSlicemask:
 		return rewriteValueAMD64_OpSlicemask(v)
 	case OpSpectreIndex:
