package main

import (
	"fmt"
	"simd"
)

const (
	TOO_SHORT      uint8 = 1 << 0
	TOO_LONG       uint8 = 1 << 1
	OVERLONG_3     uint8 = 1 << 2
	SURROGATE      uint8 = 1 << 4
	OVERLONG_2     uint8 = 1 << 5
	TWO_CONTS      uint8 = 1 << 7
	TOO_LARGE      uint8 = 1 << 3
	TOO_LARGE_1000 uint8 = 1 << 6
	OVERLONG_4     uint8 = 1 << 6
	CARRY          uint8 = TOO_SHORT | TOO_LONG | TWO_CONTS
)

var (
	maxValue = [16]uint8{255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0xf0 - 1, 0xe0 - 1, 0xc0 - 1}
	shuf1    = [16]uint8{TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
		TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
		TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
		TOO_SHORT | OVERLONG_2,
		TOO_SHORT,
		TOO_SHORT | OVERLONG_3 | SURROGATE,
		TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4}
	shuf2 = [16]uint8{CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
		CARRY | OVERLONG_2,
		CARRY,
		CARRY,
		CARRY | TOO_LARGE,
		CARRY | TOO_LARGE | TOO_LARGE_1000,
		CARRY | TOO_LARGE | TOO_LARGE_1000,
		CARRY | TOO_LARGE | TOO_LARGE_1000,
		CARRY | TOO_LARGE | TOO_LARGE_1000,
		CARRY | TOO_LARGE | TOO_LARGE_1000,
		CARRY | TOO_LARGE | TOO_LARGE_1000,
		CARRY | TOO_LARGE | TOO_LARGE_1000,
		CARRY | TOO_LARGE | TOO_LARGE_1000,
		CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
		CARRY | TOO_LARGE | TOO_LARGE_1000,
		CARRY | TOO_LARGE | TOO_LARGE_1000}
	shuf3 = [16]uint8{TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
		TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
		TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
		TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
		TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE | TOO_LARGE,
		TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE | TOO_LARGE,
		TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT}
	thirdByte = [16]uint8{
		0xe0 - 0x80, 0xe0 - 0x80, 0xe0 - 0x80, 0xe0 - 0x80, 0xe0 - 0x80,
		0xe0 - 0x80, 0xe0 - 0x80, 0xe0 - 0x80, 0xe0 - 0x80, 0xe0 - 0x80,
		0xe0 - 0x80, 0xe0 - 0x80, 0xe0 - 0x80, 0xe0 - 0x80, 0xe0 - 0x80, 0xe0 - 0x80,
	}
	fourthByte = [16]uint8{
		0xf0 - 0x80, 0xf0 - 0x80, 0xf0 - 0x80, 0xf0 - 0x80, 0xf0 - 0x80,
		0xf0 - 0x80, 0xf0 - 0x80, 0xf0 - 0x80, 0xf0 - 0x80, 0xf0 - 0x80,
		0xf0 - 0x80, 0xf0 - 0x80, 0xf0 - 0x80, 0xf0 - 0x80, 0xf0 - 0x80, 0xf0 - 0x80,
	}
	v0f = [16]uint8{
		0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
		0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
		0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
	}
	v80 = [16]uint8{
		0x80, 0x80, 0x80, 0x80, 0x80,
		0x80, 0x80, 0x80, 0x80, 0x80,
		0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
	}
	ffBy4 = simd.AsUint16x8(simd.Uint8x16([16]uint8{
		0xff >> 2, 0xff >> 2, 0xff >> 2, 0xff >> 2, 0xff >> 2,
		0xff >> 2, 0xff >> 2, 0xff >> 2, 0xff >> 2, 0xff >> 2,
		0xff >> 2, 0xff >> 2, 0xff >> 2, 0xff >> 2, 0xff >> 2, 0xff >> 2,
	}))
)

func main() {
	goodSeq := []string{
		"a",
		"\xc3\xb1",
		"\xe2\x82\xa1",
		"\xf0\x90\x8c\xbc",
		"\xc2\x80",         // 6.7.2
		"\xf0\x90\x80\x80", // 6.7.4
		"\xee\x80\x80",     // 6.11.2
		"\xef\xbb\xbf",
		"aaaaaaaaaaaaaaaaaaaa",
	}
	badSeq := []string{
		"\xC3\x28",                         // 0
		"\xA0\xA1",                         // 1
		"\xE2\x28\xA1",                     // 2
		"\xE2\x82\x28",                     // 3
		"\xF0\x28\x8C\xBC",                 // 4
		"\xF0\x90\x28\xBC",                 // 5
		"\xF0\x28\x8C\x28",                 // 6
		"\xC0\x9F",                         // 7
		"\xF5\xFF\xFF\xFF",                 // 8
		"\xED\xA0\x81",                     // 9
		"\xF8\x90\x80\x80\x80",             // 10
		"123456789012345\xED",              // 11
		"123456789012345\xF1",              // 12
		"123456789012345\xC2",              // 13
		"\xC2\x7F",                         // 14
		"\xCE",                             // 6.6.1
		"\xCE\xBA\xE1",                     // 6.6.3
		"\xCE\xBA\xE1\xBD",                 // 6.6.4
		"\xCE\xBA\xE1\xBD\xB9\xCF",         // 6.6.6
		"\xCE\xBA\xE1\xBD\xB9\xCF\x83\xCE", // 6.6.8
		"\xCE\xBA\xE1\xBD\xB9\xCF\x83\xCE\xBC\xCE", // 6.6.10
		"\xDE",     // 6.14.6
		"\xEF\xBF", // 6.14.7
		"\x80",
		"\x91\x85\x95\x9E",
		"\x6C\x02\x8E\x18",
		"\x25\x5B\x6E\x2C\x32\x2C\x5B\x5B\x33\x2C\x34\x2C\x05\x29\x2C\x33\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5D\x2C\x35\x2E\x33\x2C\x39\x2E\x33\x2C\x37\x2E\x33\x2C\x39\x2E\x34\x2C\x37\x2E\x33\x2C\x39\x2E\x33\x2C\x37\x2E\x33\x2C\x39\x2E\x34\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x20\x01\x01\x01\x01\x01\x02\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x23\x0a\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x7E\x7E\x0a\x0a\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5D\x2C\x37\x2E\x33\x2C\x39\x2E\x33\x2C\x37\x2E\x33\x2C\x39\x2E\x34\x2C\x37\x2E\x33\x2C\x39\x2E\x33\x2C\x37\x2E\x33\x2C\x39\x2E\x34\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x5D\x01\x01\x80\x01\x01\x01\x79\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",
		"[[[[[[[[[[[[[[[\x80\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x010\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",
		"\x20\x0B\x01\x01\x01\x64\x3A\x64\x3A\x64\x3A\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x5B\x30\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x80\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01",
	}

	for _, tt := range goodSeq {
		if out := validString(tt); out != true {
			fmt.Printf("validString(%q) = false; want true\n", tt)
			continue
		}

		fmt.Printf("%q is valid\n", tt)
	}

	for _, tt := range badSeq {
		if out := validString(tt); out != false {
			fmt.Printf("validString(%q) = true; want false\n", tt)
			continue
		}

		fmt.Printf("%q is not valid\n", tt)
	}
}
